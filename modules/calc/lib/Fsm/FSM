static void run_FSM(void *p) {

  fb_t *pb = (fb_t *)p;
  vam_t condition = pb->ins[1].v;
  vam_t from_singal = pb->ins[2].v;
  vam_t cur_state = pb->ins[3].v;
  vam_t targe_state = pb->ins[4].v;
  vam_t to_singal = pb->outs[1].v;
  vam_t action_singal = pb->outs[2].v;

  if(from_singal->v().b() == false)
  {
    if(cur_state->v().i() == targe_state->v().i())
    {
      to_singal->mutable_v()->set_b(true);
      action_singal->mutable_v()->set_b(true);
    }
    else{
      to_singal->mutable_v()->set_b(false);
      action_singal->mutable_v()->set_b(false);
    }
  }
  else{
    if(condition->v().b() == false)
    {
      to_singal->mutable_v()->set_b(false);
      action_singal->mutable_v()->set_b(false);     
    }
    else{
      to_singal->mutable_v()->set_b(true);
      action_singal->mutable_v()->set_b(true);
      cur_state->mutable_v()->set_i(targe_state->v().i());
      
    }
  }
  return;
}

static fb_t fb_FSM = {{"FSM", 0,run_FSM},
                        {{"EN", T_BOOL, nullptr},
                         {"COND", T_BOOL, nullptr},
                         {"FROM", T_BOOL, nullptr},
                         {"STATE", T_INT32, nullptr},
                         {"SET", T_INT32, nullptr}},
                        {{"STATUS", T_INT32, nullptr},
                         {"TO", T_BOOL, nullptr},
                         {"ACTION", T_BOOL, nullptr}}};