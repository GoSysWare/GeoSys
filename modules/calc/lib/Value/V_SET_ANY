
static void return_V_SET_ANY(vam_t &status, int s, bool is_out_lock,
                             apollo::cyber::base::ReentrantRWLock *out_lock,
                             vam_t &out, const Message *field_message,
                             Message *any_msg) {
  status->mutable_v()->set_i(s);
  if (is_out_lock == PIN_HAS_LOCK) {
    apollo::cyber::base::WriteLockGuard<apollo::cyber::base::ReentrantRWLock> lg(
        *(out_lock));
    if (field_message) {
      out->mutable_v()->mutable_any()->PackFrom(*any_msg);
    } else {
      out->clear_v();
    }
  } else {
    if (field_message) {
      out->mutable_v()->mutable_any()->PackFrom(*any_msg);
    } else {
      out->clear_v();
    }
  }
  if (any_msg) delete any_msg;
  return;
}
static void run_V_SET_ANY(void *p) {
  fb_t *pb = (fb_t *)p;
  vam_t &enable = pb->ins[0].v;
  vam_t &status = pb->outs[0].v;
  if (enable->v().b() == false) return;
  vam_t in_any = pb->ins[1].v;
  bool is_in_any_lock = pb->ins[1].s;
  apollo::cyber::base::ReentrantRWLock *in_any_lock = pb->ins[1].l;

  vam_t in_field = pb->ins[2].v;
  vam_t in_index = pb->ins[3].v;
  vam_t in_set_val = pb->ins[4].v;
  bool is_in_set_val_lock = pb->ins[4].s;
  apollo::cyber::base::ReentrantRWLock *in_set_val_lock = pb->ins[4].l;

  vam_t &out_any = pb->outs[1].v;
  bool is_out_any_lock = pb->outs[1].s;
  apollo::cyber::base::ReentrantRWLock *out_any_lock = pb->outs[1].l;
  int index = in_index->v().i();
  if (in_any->t() != v_type::T_ANY) {
    return_V_SET_ANY(status, 1, is_out_any_lock, out_any_lock, out_any, 0, 0);
    return;
  }

  //输入的any 转化为原型
  std::string type_name;
  google::protobuf::internal::ParseAnyTypeUrl(in_any->v().any().type_url(), &type_name);
  const Descriptor *new_descriptor =
      DescriptorPool::generated_pool()->FindMessageTypeByName(type_name);
  if (!new_descriptor) {
    return_V_SET_ANY(status, -2, is_out_any_lock, out_any_lock, out_any, 0, 0);
    return;
  }
  const Message *new_prototype =
      MessageFactory::generated_factory()->GetPrototype(new_descriptor);
  if (!new_prototype) {
    return_V_SET_ANY(status, -3, is_out_any_lock, out_any_lock, out_any, 0, 0);
    return;
  }
  Message *any_msg = new_prototype->New();
  if (!any_msg) {
    return_V_SET_ANY(status, -4, is_out_any_lock, out_any_lock, out_any, 0, 0);
    return;
  }
  if (is_in_any_lock == PIN_HAS_LOCK) {
    apollo::cyber::base::ReadLockGuard<apollo::cyber::base::ReentrantRWLock> lg(
        *(in_any_lock));
    in_any->v().any().UnpackTo(any_msg);
  } else {
    in_any->v().any().UnpackTo(any_msg);
  }

  //设定的any 转化为原型
  std::string set_val_type_name;
  google::protobuf::internal::ParseAnyTypeUrl(in_any->v().any().type_url(), &set_val_type_name);
  const Descriptor *set_val_new_descriptor =
      DescriptorPool::generated_pool()->FindMessageTypeByName(
          set_val_type_name);
  if (!set_val_new_descriptor) {
    return_V_SET_ANY(status, -2, is_out_any_lock, out_any_lock, out_any, 0, 0);
    return;
  }
  const Message *set_val_new_prototype =
      MessageFactory::generated_factory()->GetPrototype(set_val_new_descriptor);
  if (!set_val_new_prototype) {
    return_V_SET_ANY(status, -3, is_out_any_lock, out_any_lock, out_any, 0, 0);
    return;
  }
  Message *set_val_any_msg = set_val_new_prototype->New();
  if (!set_val_any_msg) {
    return_V_SET_ANY(status, -4, is_out_any_lock, out_any_lock, out_any, 0, 0);
    return;
  }
  if (is_in_set_val_lock == PIN_HAS_LOCK) {
    apollo::cyber::base::ReadLockGuard<apollo::cyber::base::ReentrantRWLock> lg(
        *(in_set_val_lock));
    in_set_val->v().any().UnpackTo(set_val_any_msg);
  } else {
    in_set_val->v().any().UnpackTo(set_val_any_msg);
  }

  std::vector<std::string> string_list;
  split(in_field->v().str(), string_list, ".");
  const Descriptor *descriptor;
  const Reflection *reflection;
  const FieldDescriptor *field_descriptor;

  Message *field_message = any_msg;

  //在最后一个field之前都不能存在 repeated
  for (int i = 0; i < string_list.size() - 1; i++) {
    descriptor = field_message->GetDescriptor();
    reflection = field_message->GetReflection();
    field_descriptor = descriptor->FindFieldByName(string_list[i]);
    if (!field_descriptor) {
      return_V_SET_ANY(status, -5, is_out_any_lock, out_any_lock, out_any, 0,
                       any_msg);
      return;
    }
    if (field_descriptor->is_repeated()) {
      return_V_SET_ANY(status, -8, is_out_any_lock, out_any_lock, out_any, 0,
                       any_msg);
      return;
    } else {
      field_message =
          reflection->MutableMessage(field_message, field_descriptor);
    }
  }
  //最后一个独立处理
  descriptor = field_message->GetDescriptor();
  reflection = field_message->GetReflection();
  field_descriptor =
      descriptor->FindFieldByName(string_list[string_list.size() - 1]);
  if (!field_descriptor) {
    return_V_SET_ANY(status, -5, is_out_any_lock, out_any_lock, out_any, 0,
                     any_msg);
    return;
  }

  if (field_descriptor->is_repeated()) {
    if (index >= reflection->FieldSize(*field_message, field_descriptor)) {
      return_V_SET_ANY(status, -6, is_out_any_lock, out_any_lock, out_any, 0,
                       any_msg);
      return;
    } else if (index < 0) {
      return_V_SET_ANY(status, -7, is_out_any_lock, out_any_lock, out_any, 0,
                       any_msg);
      return;
    }
    if (field_descriptor->cpp_type() != FieldDescriptor::CPPTYPE_MESSAGE) {
      return_V_SET_ANY(status, -9, is_out_any_lock, out_any_lock, out_any, 0,
                       any_msg);
      return;
    }
    field_message = reflection->MutableRepeatedMessage(field_message,
                                                       field_descriptor, index);
  } else {
    field_message = reflection->MutableMessage(field_message, field_descriptor);
  }
  if (field_descriptor->full_name() != set_val_any_msg->GetTypeName()) {
    return_V_SET_ANY(status, -9, is_out_any_lock, out_any_lock, out_any, 0,
                     any_msg);
    return;
  }
  field_message->CopyFrom(*set_val_any_msg);

  return_V_SET_ANY(status, 0, is_out_any_lock, out_any_lock, out_any,
                   field_message, any_msg);
  return;
}

static fb_t fb_V_SET_ANY = {
    {"Value", "V_SET_ANY", "", 0, 0, 0, 0, FB_EXEC, run_V_SET_ANY},
    {{"EN", PIN_NO_LOCK, T_BOOL, "", "", nullptr, 0},
     {"IN", PIN_NO_LOCK, T_ANY, "", "", nullptr, 0},
     {"FIELD", PIN_NO_LOCK, T_STRING, "", "", nullptr, 0},
     {"INDEX", PIN_NO_LOCK, T_INT32, "", "", nullptr, 0},
     {"SET_VAL", PIN_NO_LOCK, T_ANY, "", "", nullptr, 0}},
    {{"STATUS", PIN_NO_LOCK, T_INT32, "", "", nullptr, 0},
     {"OUT", PIN_NO_LOCK, T_ANY, "", "", nullptr, 0}}};