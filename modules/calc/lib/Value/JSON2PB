#include <google/protobuf/util/json_util.h>

#include "cyber/cyber.h"

static void return_JSON2PB(vam_t &status, int s, bool is_out_lock,
                           apollo::cyber::base::ReentrantRWLock *out_lock,
                           vam_t &out, Message *any_msg) {
  status->mutable_v()->set_i(s);
  if (is_out_lock == PIN_HAS_LOCK) {
    apollo::cyber::base::ReadLockGuard<apollo::cyber::base::ReentrantRWLock> lg(
        *(out_lock));
    if (any_msg) {
      out->CopyFrom(*any_msg);
    } else {
      out->clear_v();
    }
  } else {
    if (any_msg) {
      out->CopyFrom(*any_msg);
    } else {
      out->clear_v();
    }
  }
  return;
}

static void run_JSON2PB(void *p) {
  fb_t *pb = (fb_t *)p;
  vam_t &enable = pb->ins[0].v;
  vam_t &status = pb->outs[0].v;
  if (enable->v().b() == false) return;
  vam_t in_json = pb->ins[1].v;
  bool is_in_json_lock = pb->ins[1].s;
  apollo::cyber::base::ReentrantRWLock *in_json_lock = pb->ins[1].l;

  vam_t case_insensitive_enum_parsing = pb->ins[2].v;
  vam_t ignore_unknown_fields = pb->ins[3].v;

  vam_t &out_any = pb->outs[1].v;
  bool is_out_any_lock = pb->outs[1].s;
  apollo::cyber::base::ReentrantRWLock *out_any_lock = pb->outs[1].l;

  value_tm any_msg;
  google::protobuf::util::JsonParseOptions options;
  options.case_insensitive_enum_parsing =
      case_insensitive_enum_parsing->v().b();
  options.ignore_unknown_fields = ignore_unknown_fields->v().b();

  std::string json_str = in_json->v().str();
  AINFO << "json_str:" << json_str;
  Status st;
  if (is_in_json_lock == PIN_HAS_LOCK) {
    apollo::cyber::base::ReadLockGuard<apollo::cyber::base::ReentrantRWLock> lg(
        *(in_json_lock));
    st =
        google::protobuf::util::JsonStringToMessage(json_str, &any_msg, options);
  } else {
    st =
        google::protobuf::util::JsonStringToMessage(json_str, &any_msg, options);
  }
  if (st.ok()) {
    return_JSON2PB(status, st.code(), is_out_any_lock, out_any_lock, out_any,
                   &any_msg);
  } else {
    return_JSON2PB(status, st.code(), is_out_any_lock, out_any_lock, out_any,
                   0);
  }
  return;
}

static fb_t fb_JSON2PB = {
    {"Value", "JSON2PB", "", 0, 0, 0, FB_EXEC, run_JSON2PB},
    {{"EN", PIN_NO_LOCK, T_BOOL, "", "", nullptr, 0},
     {"IN", PIN_NO_LOCK, T_STRING, "", "", nullptr, 0},
     {"UNKONWN", PIN_NO_LOCK, T_BOOL, "", "", nullptr, 0},  // 是否打印未知字段
     {"CASE", PIN_NO_LOCK, T_BOOL, "", "", nullptr, 0}},  // 是否大小写处理
    {{"STATUS", PIN_NO_LOCK, T_INT32, "", "", nullptr, 0},
     {"OUT", PIN_NO_LOCK, T_ANY, "", "", nullptr, 0}}};