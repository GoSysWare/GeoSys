static void run_STR_INSERT(void *p) {

  fb_t *pb = (fb_t *)p;
  vam_t &enable = pb->ins[0].v;
  vam_t &status = pb->outs[0].v;
  if (enable->v().b() == false)
    return;
  vam_t &out = pb->outs[1].v;
  vam_t &out_len = pb->outs[2].v;
  vam_t in1 = pb->ins[1].v;
  vam_t in2 = pb->ins[2].v;
  vam_t pos = pb->ins[3].v;
  std::string tmp;
  tmp = in1->v().str();
  out->mutable_v()->set_str(
      std::move(tmp.insert(pos->v().ui(), in2->v().str())));
  out_len->mutable_v()->set_ui(out->v().str().length());
}

static fb_t fb_STR_INSERT = {
    {"String", "STR_INSERT", "", 0, 0, 0, 0, run_STR_INSERT},
    {{"EN", PIN_NO_LOCK, T_BOOL, "", "",nullptr,0},
     {"IN1", PIN_NO_LOCK, T_STRING, "", "",nullptr,0},
     {"IN2", PIN_NO_LOCK, T_STRING, "", "",nullptr,0},
     {"POS", PIN_NO_LOCK, T_UINT32, "", "",nullptr,0}},
    {{"STATUS", PIN_NO_LOCK, T_INT32, "", "",nullptr,0},
     {"OUT", PIN_NO_LOCK, T_STRING, "", "",nullptr,0},
     {"LENGTH", PIN_NO_LOCK, T_UINT32, "", "",nullptr,0}}};
