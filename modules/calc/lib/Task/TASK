static void run_TASK(void *p) {

  fb_t *pb = (fb_t *)p;
  vam_t fire = pb->ins[1].v;
  vam_t task_name = pb->ins[2].v;
  vam_t timeout = pb->ins[3].v;
  vam_t param_req = pb->ins[4].v;
  vam_t &next_task = pb->outs[1].v;
  vam_t &param_rsp = pb->outs[2].v;
  auto client =
      apollo::cyber::GlobalNode()->CreateAsyncTaskClient<value_tm, value_tm>(
          task_name->v().str());
  auto response =
      client->SendRequest(param_req, std::chrono::seconds(timeout->v().tm()));
  param_rsp->mutable_v()->set_t(response->v().t());
  switch (response->v().t()) {
  case v_type::T_BOOL:
    param_rsp->mutable_v()->set_b(response->v().b());
    break;
  case v_type::T_INT32:
    param_rsp->mutable_v()->set_i(response->v().i());
    break;
  case v_type::T_UINT32:
    param_rsp->mutable_v()->set_ui(response->v().ui());
    break;
  case v_type::T_INT64:
    param_rsp->mutable_v()->set_ll(response->v().ll());
    break;
  case v_type::T_UINT64:
    param_rsp->mutable_v()->set_ull(response->v().ull());
    break;
  case v_type::T_FLOAT32:
    param_rsp->mutable_v()->set_f(response->v().f());
    break;
  case v_type::T_FLOAT64:
    param_rsp->mutable_v()->set_d(response->v().d());
    break;
  case v_type::T_TIME:
    param_rsp->mutable_v()->set_tm(response->v().tm());
    break;
  case v_type::T_STRING:
    param_rsp->mutable_v()->set_str(response->v().str());
    break;
  case v_type::T_BYTES:
    param_rsp->mutable_v()->set_blob(response->v().blob());
    break;
  case v_type::T_IMAGE:
    param_rsp->mutable_v()->set_img(response->v().img());
    break;
  case v_type::T_LIDAR:
    param_rsp->mutable_v()->set_lidar(response->v().lidar());
    break;
  case v_type::T_SONAR:
    param_rsp->mutable_v()->set_sonar(response->v().sonar());
    break;
  case v_type::T_FILE:
    param_rsp->mutable_v()->set_file(response->v().file());
    break;
  default:;
  }
  return;
}

static fb_t fb_TASK = {{"Task", "TASK", 0, run_TASK},
                       {{"EN", PIN_NO_LINK, T_BOOL, nullptr},
                        {"FIRE", PIN_NO_LINK, T_BOOL, nullptr},
                        {"NAME", PIN_NO_LINK, T_STRING, nullptr},
                        {"TIMEOUT", PIN_NO_LINK, T_TIME, nullptr},
                        {"REQ", PIN_NO_LINK, T_INT32, nullptr}},
                       {
                           {"STATUS", PIN_NO_LINK, T_INT32, nullptr},
                           {"NEXT", PIN_NO_LINK, T_BOOL, nullptr},
                           {"RSP", PIN_NO_LINK, T_INT32, nullptr},
                       }};