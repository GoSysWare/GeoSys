static void run_TASK(void *p) {

  fb_t *pb = (fb_t *)p;
  vam_t fire = pb->ins[1].v;
  vam_t task_name = pb->ins[2].v;
  vam_t timeout = pb->ins[3].v;
  vam_t param_req = pb->ins[4].v;
  vam_t &next_task = pb->outs[1].v;
  vam_t &req_time = pb->outs[2].v;
  vam_t &param_rsp = pb->outs[3].v;
  auto client =
      apollo::cyber::GlobalNode()->CreateAsyncTaskClient<TaskReqParam, TaskRspParam>(
          task_name->v().str());
 
  std::shared_ptr<TaskReqParam> request = std::make_shared<TaskReqParam>();
  request->mutable_param()->CopyFrom(*param_req);
  request->set_client(pb->h.fbname);

  auto response =  client->SendRequest(request, std::chrono::seconds(timeout->v().tm()));
  if(response == nullptr) return;

  param_rsp->CopyFrom(response->param());

  return;
}

static fb_t fb_TASK = {{"Task", "TASK", "",0,0,0,0, run_TASK},
                       {{"EN", PIN_NO_LINK, T_BOOL, nullptr},
                        {"FIRE", PIN_NO_LINK, T_BOOL, nullptr},
                        {"NAME", PIN_NO_LINK, T_STRING, nullptr},
                        {"TIMEOUT", PIN_NO_LINK, T_TIME, nullptr},
                        {"REQ", PIN_NO_LINK, T_INT32, nullptr}},
                       {
                           {"STATUS", PIN_NO_LINK, T_INT32, nullptr},
                           {"NEXT", PIN_NO_LINK, T_BOOL, nullptr},
                           {"REQ_TIME", PIN_NO_LINK, T_TIME, nullptr},
                           {"RSP", PIN_NO_LINK, T_INT32, nullptr},
                           {"RSP_TIME", PIN_NO_LINK, T_TIME, nullptr}

                       }};