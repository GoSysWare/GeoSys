static void run_RESPONSE(void *p) {

  fb_t *pb = (fb_t *)p;
  //这个pin被系统内置为resquest
  vam_t &prg_response = pb->outs[1].v;

  if (pb) {
    for (auto &pin : pb->ins) {
      if (pin.s == PIN_HAS_LOCK) {
        // response是引用,只能是值拷贝
        prg_response->mutable_v()->set_t(pin.v->v().t());

        switch (pin.v->v().t()) {
        case v_type::T_BOOL:
          prg_response->mutable_v()->set_b(pin.v->v().b());
          break;
        case v_type::T_INT32:
          prg_response->mutable_v()->set_i(pin.v->v().i());
          break;
        case v_type::T_UINT32:
          prg_response->mutable_v()->set_ui(pin.v->v().ui());
          break;
        case v_type::T_INT64:
          prg_response->mutable_v()->set_ll(pin.v->v().ll());
          break;
        case v_type::T_UINT64:
          prg_response->mutable_v()->set_ull(pin.v->v().ull());
          break;
        case v_type::T_FLOAT32:
          prg_response->mutable_v()->set_f(pin.v->v().f());
          break;
        case v_type::T_FLOAT64:
          prg_response->mutable_v()->set_d(pin.v->v().d());
          break;
        case v_type::T_TIME:
          prg_response->mutable_v()->set_tm(pin.v->v().tm());
          break;
        case v_type::T_STRING:
          prg_response->mutable_v()->set_str(pin.v->v().str());
          break;
        case v_type::T_BYTES:
          prg_response->mutable_v()->set_blob(pin.v->v().blob());
          break;
        case v_type::T_IMAGE:
          prg_response->mutable_v()->set_img(pin.v->v().img());
          break;
        case v_type::T_LIDAR:
          prg_response->mutable_v()->set_lidar(pin.v->v().lidar());
          break;
        case v_type::T_SONAR:
          prg_response->mutable_v()->set_sonar(pin.v->v().sonar());
          break;
        case v_type::T_FILE:
          prg_response->mutable_v()->set_file(pin.v->v().file());
          break;
        default:;
        }
        return;
      }
    }
  }
  return;
}

static fb_t fb_RESPONSE = {
    {"Task", "RESPONSE", "",0,0,0,0, run_RESPONSE},
    {{"EN", PIN_NO_LOCK, T_BOOL, "", "",nullptr,0},
     {"RESPONSE_BOOL", PIN_NO_LOCK, T_BOOL, "", "",nullptr,0},
     {"RESPONSE_INT32", PIN_NO_LOCK, T_INT32, "", "",nullptr,0},
     {"RESPONSE_UINT32", PIN_NO_LOCK, T_UINT32, "", "",nullptr,0},
     {"RESPONSE_T_INT64", PIN_NO_LOCK, T_INT64, "", "",nullptr,0},
     {"RESPONSE_T_UINT64", PIN_NO_LOCK, T_UINT64, "", "",nullptr,0},
     {"RESPONSE_FLOAT32", PIN_NO_LOCK, T_FLOAT32, "", "",nullptr,0},
     {"RESPONSE_FLOAT64", PIN_NO_LOCK, T_FLOAT64, "", "",nullptr,0},
     {"RESPONSE_TIME", PIN_NO_LOCK, T_TIME, "", "",nullptr,0},
     {"RESPONSE_STRING", PIN_NO_LOCK, T_STRING, "", "",nullptr,0},
     {"RESPONSE_BYTES", PIN_NO_LOCK, T_BYTES, "", "",nullptr,0},
     {"RESPONSE_IMAGE", PIN_NO_LOCK, T_IMAGE, "", "",nullptr,0},
     {"RESPONSE_LIDAR", PIN_NO_LOCK, T_LIDAR, "", "",nullptr,0},
     {"RESPONSE_SONAR", PIN_NO_LOCK, T_SONAR, "", "",nullptr,0},
     {"RESPONSE_FILE", PIN_NO_LOCK, T_FILE, "", "",nullptr,0}},
    {{"STATUS", PIN_NO_LOCK, T_INT32, "", "",nullptr,0},
     {"RESPONSE", PIN_NO_LOCK, T_NONE, "", "",nullptr,0}}};