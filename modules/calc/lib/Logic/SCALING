
// 量程转化，把一个值转化到另一个量程范围内
static void run_SCALING(void *p) {

  fb_t *pb = (fb_t *)p;
  vam_t &enable = pb->ins[0].v;
  vam_t &status = pb->outs[0].v;
  if (enable->v().b() == false)
    return;
  vam_t &out = pb->outs[1].v;
  vam_t in = pb->ins[1].v;
  vam_t in_max = pb->ins[2].v;
  vam_t in_min = pb->ins[3].v;

  out->mutable_v()->set_f(in->v().f() * (in_max->v().f() - in_min->v().f()) +
                          in_min->v().f());
}

static fb_t fb_SCALING = {{"Logic", "SCALING", "", 0, 0, 0, 0, run_SCALING},
                          {{"EN", PIN_NO_LOCK, T_BOOL, "", "",nullptr,0},
                           {"IN", PIN_NO_LOCK, T_FLOAT32, "", "",nullptr,0},
                           {"MAX", PIN_NO_LOCK, T_FLOAT32, "", "",nullptr,0},
                           {"MIN", PIN_NO_LOCK, T_FLOAT32, "", "",nullptr,0}},
                          {{"STATUS", PIN_NO_LOCK, T_INT32, "", "",nullptr,0},
                           {"OUT", PIN_NO_LOCK, T_FLOAT32, "", "",nullptr,0}}};