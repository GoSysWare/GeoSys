static Real limit_y(Real t, Real max, Real min)
{
	if(t > max){
		t = max;
	}else if(t < min){
		t = min;
	}
	return t;
}

static void run_SS_MA(void *p)
{	
	fb_t *pb = (fb_t *)p;
	
	if(pb->d[2].v.v.b){
		pb->d[8].v.v.f = limit_y(pb->d[1].v.v.f, pb->d[4].v.v.f, pb->d[5].v.v.f);
		pb->d[9].v.v.f = limit_y(pb->d[1].v.v.f, pb->d[4].v.v.f, pb->d[5].v.v.f);
		return;
	}

	
	if(pb->d[3].v.v.b){
		pb->d[10].v.v.b = 1;
	}else{
		pb->d[10].v.v.b = 0;
	}

	
	if(pb->d[6].v.v.b){
		pb->d[11].v.v.b = 1;
		return;
	}
	
	pb->d[11].v.v.b = 0;


	if(!pb->d[10].v.v.b){
		pb->d[8].v.v.f = limit_y(pb->d[7].v.v.f, pb->d[4].v.v.f, pb->d[5].v.v.f);
		pb->d[9].v.v.f = limit_y(pb->d[7].v.v.f, pb->d[4].v.v.f, pb->d[5].v.v.f);
		return;
	}
	
	
	if(pb->d[10].v.v.b){
		pb->d[8].v.v.f = limit_y(pb->d[0].v.v.f, pb->d[4].v.v.f, pb->d[5].v.v.f);
		pb->d[9].v.v.f = limit_y(pb->d[0].v.v.f, pb->d[4].v.v.f, pb->d[5].v.v.f);
	}
}

static fb_t fb_SS_MA = {
	"SS_MA", 8, 4, 0, 0, run_SS_MA, 
	{	
		"IN", T_REAL, 0,	
		"OV", T_REAL, 0,
		"OS", T_BOOL, 0,	
		"M_A", T_BOOL, 0,	
		"MAX", T_REAL, 0,
		"MIN", T_REAL, 0,
		"L", T_BOOL, 0,		
		"OUT_M", T_REAL, 0,
		
		"OUT", T_REAL, 0,
		"out", T_REAL, 0,
		"S", T_BOOL, 0,		
		"Lock", T_BOOL, 0,	
	}	
};
