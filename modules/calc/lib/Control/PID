static void run_PID(void *p) {

  fb_t *pb = (fb_t *)p;
  vam_t enable = pb->ins[0].v;
  vam_t &status = pb->outs[0].v;
  if (enable->v().b() == false)
    return;
  uint64_t dt = pb->h.cycle_time / 1000000;

  bool MAN = pb->ins[1].v->v().b();
  bool HALT = pb->ins[2].v->v().b();
  double SP = pb->ins[3].v->v().d();
  double PV = pb->ins[4].v->v().d();
  double BIAS = pb->ins[5].v->v().d();
  bool EN_P = pb->ins[6].v->v().b();
  bool EN_I = pb->ins[7].v->v().b();
  bool EN_D = pb->ins[8].v->v().b();
  bool D_ON_X = pb->ins[9].v->v().b();
  double GAIN = pb->ins[10].v->v().d();
  double TI = pb->ins[11].v->v().d();
  double TD = pb->ins[12].v->v().d();
  double TD_LAG = pb->ins[13].v->v().d();
  double YMAX = pb->ins[14].v->v().d();
  double YMIN = pb->ins[15].v->v().d();
  double YMAN = pb->ins[16].v->v().d();

  vam_t &Y = pb->outs[1].v;
  vam_t &ER = pb->outs[2].v;
  vam_t &QMAX = pb->outs[3].v;
  vam_t &QMIN = pb->outs[4].v;
  vam_t &YP = pb->outs[5].v;
  vam_t &YI = pb->outs[6].v;
  vam_t &YD = pb->outs[7].v;

  vam_t &OLD_YI = pb->props[0].v;
  vam_t &OLD_YD = pb->props[1].v;
  vam_t &OLD_ER = pb->props[2].v;
  vam_t &OLD_PV = pb->props[3].v;

  double er = SP - PV;
  double ti = TI;
  double td = TD;
  double td_lag = TD_LAG;

  ER->mutable_v()->set_d(er);
  if (EN_P) {
    YP->mutable_v()->set_d(GAIN * er);
  } else {
    YP->mutable_v()->set_d(0.0);
  }

  if ((MAN == false) && (HALT == false)) {
    if (EN_I) {
      if (!QMAX->v().b() && !QMIN->v().b()) {
        if ((YI->v().d() <= (YMAX - YP->v().d() - BIAS)) &&
            (YI->v().d() >= (YMIN - YP->v().d() - BIAS))) {
          YI->mutable_v()->set_d(OLD_YI->v().d() +
                                 GAIN * dt / ti * (er + OLD_ER->v().d()) / 2);
        } else if (YI->v().d() > (YMAX - YP->v().d() - BIAS)) {
          YI->mutable_v()->set_d(YMAX - YP->v().d() - BIAS);
        } else if ((YI->v().d() < (YMIN - YP->v().d() - BIAS))) {
          YI->mutable_v()->set_d(YMIN - YP->v().d() - BIAS);
        }
      }
    } else {
      YI->mutable_v()->set_d(0.0);
    }

    if (EN_D) {
      if (D_ON_X) {
        YD->mutable_v()->set_d(OLD_YI->v().d() * td_lag +
                               td * GAIN * (er - OLD_ER->v().d()) /
                                   (dt + td_lag));
      } else {
        YD->mutable_v()->set_d(OLD_YI->v().d() * td_lag +
                               td * GAIN * (OLD_PV->v().d() - PV) /
                                   (dt + td_lag));
      }
    } else {
      YD->mutable_v()->set_d(0.0);
    }
  }

  //
  if (!MAN) {
    if (!HALT) {
      Y->mutable_v()->set_d(YP->v().d() + YI->v().d() + YD->v().d());
    } else {
      if (EN_I) {
        if ((YI->v().d() <= (YMAX - YP->v().d() - BIAS)) &&
            (YI->v().d() >= (YMIN - YP->v().d() - BIAS))) {
          YI->mutable_v()->set_d(OLD_YI->v().d() +
                                 GAIN * dt / ti * (er + OLD_ER->v().d()) / 2);
        } else if (YI->v().d() > (YMAX - YP->v().d() - BIAS)) {
          YI->mutable_v()->set_d(YMAX - YP->v().d() - BIAS);
        } else if ((YI->v().d() < (YMIN - YP->v().d() - BIAS))) {
          YI->mutable_v()->set_d(YMIN - YP->v().d() - BIAS);
        }
      } else {
        YI->mutable_v()->set_d(0.0);
      }
      YD->mutable_v()->set_d(0.0);
    }
  } else {
    Y->mutable_v()->set_d(YMAN);
    if (EN_I) {
      if ((YI->v().d() <= (YMAX - YP->v().d() - BIAS)) &&
          (YI->v().d() >= (YMIN - YP->v().d() - BIAS))) {
        YI->mutable_v()->set_d(OLD_YI->v().d() +
                               GAIN * dt / ti * (er + OLD_ER->v().d()) / 2);
      } else if (YI->v().d() > (YMAX - YP->v().d() - BIAS)) {
        YI->mutable_v()->set_d(YMAX - YP->v().d() - BIAS);
      } else if ((YI->v().d() < (YMIN - YP->v().d() - BIAS))) {
        YI->mutable_v()->set_d(YMIN - YP->v().d() - BIAS);
      }
    } else {
      YI->mutable_v()->set_d(0.0);
    }
    YD->mutable_v()->set_d(0.0);
  }

  if (Y->v().d() > YMAX) {
    QMAX->mutable_v()->set_b(true);
    Y->mutable_v()->set_d(YMAX);
  } else {
    QMAX->mutable_v()->set_b(false);
  }
  if (Y->v().d() < YMIN) {
    QMIN->mutable_v()->set_b(true);
    Y->mutable_v()->set_d(YMIN);
  } else {
    QMIN->mutable_v()->set_b(false);
  }
  OLD_YI->mutable_v()->set_d(YI->v().d());
  OLD_YD->mutable_v()->set_d(YD->v().d());
  OLD_ER->mutable_v()->set_d(er);
  OLD_PV->mutable_v()->set_d(PV);
}

static fb_t fb_PID = {{"Control", "PID", "", 0, 0, 0, 0, run_PID},
                      {{"EN", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"MAN", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"HALT", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"SP", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"PV", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"BIAS", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"EN_P", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"EN_I", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"EN_D", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"D_ON_X", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"GAIN", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"TI", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"TD", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"TD_LAG", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"YMAX", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"YMIN", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"YMAN", PIN_NO_LINK, T_FLOAT64, "", nullptr}},
                      {{"STATUS", PIN_NO_LINK, T_INT32, "", nullptr},
                       {"Y", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"ER", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"QMAX", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"QMIN", PIN_NO_LINK, T_BOOL, "", nullptr},
                       {"YP", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"YI", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"YD", PIN_NO_LINK, T_FLOAT64, "", nullptr}},
                      {{"OLD_YI", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"OLD_YD", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"OLD_ER", PIN_NO_LINK, T_FLOAT64, "", nullptr},
                       {"OLD_PV", PIN_NO_LINK, T_FLOAT64, "", nullptr}}};