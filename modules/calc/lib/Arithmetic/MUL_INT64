static void run_MUL_INT64(void *p) {

  fb_t *pb = (fb_t *)p;
  vam_t &enable = pb->ins[0].v;
  vam_t &status = pb->outs[0].v;
  if (enable->v().b() == false)
    return;
  vam_t &out = pb->outs[1].v;
  vam_t in1 = pb->ins[1].v;
  vam_t in2 = pb->ins[2].v;
  double l = (double)in1->v().ll() * (double)in2->v().ll();
  if(l < LLONG_MIN || l > LLONG_MAX  ){
	status->mutable_v()->set_i(-2);
  }else{
  	out->mutable_v()->set_ll(in1->v().ll() * in2->v().ll());
  }
}

static fb_t fb_MUL_INT64 = {
    {"Arithmetic", "MUL_INT64", "", 0, 0, 0, 0, run_MUL_INT64},
    {{"EN", PIN_NO_LINK, T_BOOL, "", nullptr},
     {"IN1", PIN_NO_LINK, T_INT64, "", nullptr},
	 {"IN2", PIN_NO_LINK, T_INT64, "", nullptr}},
    {{"STATUS", PIN_NO_LINK, T_INT32, "", nullptr},
     {"OUT", PIN_NO_LINK, T_INT64, "", nullptr}}};
