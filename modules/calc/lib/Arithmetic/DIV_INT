
static void run_DIV_INT(void *p) {

   fb_t *pb = (fb_t *)p;
  vam_t &enable = pb->ins[0].v;
  vam_t &status = pb->outs[0].v;
  if (enable->v().b() == false)
    return;
  vam_t &out = pb->outs[1].v;
  vam_t in1 = pb->ins[1].v;
  vam_t in2 = pb->ins[2].v;
  if(in2->v().i() != 0){
  	out->mutable_v()->set_i(in1->v().i() / in2->v().i());
  }
  else{
	status->mutable_v()->set_i(-1);
  }
}

static fb_t fb_DIV_INT = {
    {"Arithmetic","DIV_INT","", 0,0,0,0, run_DIV_INT},
    {{"EN", PIN_NO_LOCK,T_BOOL,"", nullptr},
     {"IN1", PIN_NO_LOCK,T_INT32, "",nullptr},
     {"IN2", PIN_NO_LOCK,T_INT32,"", nullptr}},
    {{"STATUS", PIN_NO_LOCK,T_INT32,"", nullptr}, 
    {"OUT", PIN_NO_LOCK,T_INT32, "",nullptr}}};

