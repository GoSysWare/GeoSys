#include <dlib/dnn.h>
#include <dlib/clustering.h>
#include <dlib/string.h>
#include <dlib/image_io.h>
#include <dlib/image_processing/frontal_face_detector.h>

static void run_DLIB_FACE_DETECT(void *p) {

  fb_t *pb = (fb_t *)p;
  vam_t &enable = pb->ins[0].v;
  vam_t &status = pb->outs[0].v;
  if (enable->v().b() == false)
    return;
  vam_t in_img = pb->ins[1].v;
  vam_t in_width = pb->ins[2].v;
  vam_t in_height = pb->ins[3].v;
  vam_t sp_file = pb->ins[4].v;
  vam_t anet_file = pb->ins[5].v;

  vam_t &out1 = pb->outs[1].v;
  vam_t &out2 = pb->outs[2].v;

  uint32_t width = width->v().ui();
  uint32_t height = in_height->v().ui();

  std::string value = in_img->v().img();

  dlib::frontal_face_detector detector = dlib::get_frontal_face_detector();
  dlib::deserialize(sp_file->v().file()) >> sp;
   dlib:: anet_type net;
  dlib::deserialize(anet_file->v().file()) >> net;
   dlib::matrix<rgb_pixel> dlib_img;
   dlib_img.resize(height,width);

  int index;
  for (int i = 0; i < height; i++) {
    for (int j = 0; j < width; j++) {
      index = i * width + j;
      dlib::rgb_pixel  pix = dlib_img(i,j);
      pix.red = value[index * 3 + 0];
      pix.green = value[index * 3 + 1];
      pix.blue = value[index * 3 + 2];
    }
  }
   std::vector<dlib::matrix<dlib::rgb_pixel>> faces;
    int count = 1;
    for (auto face : detector(dlib_img))
    {
        auto shape = sp(dlib_img, face);
        dlib::matrix<dlib::rgb_pixel> face_chip;
        dlib::extract_image_chip(dlib_img, get_face_chip_details(shape,150,0.25), face_chip);
        dlib::save_jpeg(face_chip,"/home/shuimujie/Works/bamboo_ws/out_"+std::to_string(count++)+".jpeg");
        faces.push_back(move(face_chip));
    }
    if (faces.size() == 0)
    {
        cout << "No faces found in image!" << endl;
        return 1;
    }
  return;
}

static fb_t fb_DLIB_FACE_DETECT = {{"AI","DLIB_FACE_DETECT", "",0,0,0,FB_INIT,run_DLIB_FACE_DETECT},
                        {{"EN",PIN_NO_LINK, T_BOOL, "", nullptr},
                         {"IMG", PIN_NO_LINK,T_IMAGE, "", nullptr},
                         {"WIDTH", PIN_NO_LINK,T_UINT32, "", nullptr},
                         {"HEIGHT", PIN_NO_LINK,T_UINT32, "", nullptr},
                         {"SP_MOD", PIN_NO_LINK,T_FILE, "", nullptr},
                        {"ANET_MOD", PIN_NO_LINK,T_FILE, "", nullptr}},
                        {{"STATUS", PIN_NO_LINK,T_INT32, "", nullptr},
                         {"IMG_OUT", PIN_NO_LINK,T_FILE, "", nullptr},
                         {"FACE_COUNT", PIN_NO_LINK,T_FILE, "", nullptr}}};